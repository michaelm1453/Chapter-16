#BlueJ class context
comment0.params=maze
comment0.target=MazeSolver(Maze)
comment0.text=\r\n\ Constructor\r\n\r\n\ \ @param\ maze\ the\ maze\ to\ solve\r\n
comment1.params=
comment1.target=void\ makeEmpty()
comment1.text=\r\n\ Create\ an\ empty\ worklist\r\n\r\n
comment2.params=
comment2.target=boolean\ isEmpty()
comment2.text=\r\n\ Returns\ true\ if\ the\ worklist\ is\ empty\r\n\r\n\ \ @return\ true\ if\ the\ worklist\ is\ empty\r\n
comment3.params=sq
comment3.target=void\ add(Square)
comment3.text=\r\n\ Adds\ the\ specified\ square\ to\ the\ worklist\r\n\r\n\ \ @param\ the\ square\ to\ add\ to\ the\ worklist\r\n
comment4.params=
comment4.target=Square\ next()
comment4.text=\r\n\ Returns\ the\ next\ item\ from\ the\ worklist\r\n\r\n\ \ @return\ the\ next\ item\ from\ the\ worklist\r\n
comment5.params=
comment5.target=boolean\ isSolved()
comment5.text=\r\n\ Returns\ true\ if\ either\:\ A\ path\ from\ the\ start\ to\ the\ exit\ has\ been\ found;\ OR\r\n\ \ \ \ \ \ You\ determine\ there\ is\ no\ such\ path\ (worklist\ is\ now\ empty)\r\n\r\n\ \ @return\ if\ the\ maze\ is\ solved\r\n
comment6.params=
comment6.target=java.lang.String\ getPath()
comment6.text=\r\n\ Returns\ either\ a\ string\ of\ the\ solution\ path\ as\ a\ list\ of\ coordinates\ [i,j]\r\n\ \ \ \ \ \ from\ the\ start\ to\ the\ exit\ or\ a\ message\ indicating\ no\ such\ path\ exists.\r\n\ \ \ \ \ \ If\ the\ maze\ isn't\ solved,\ a\ message\ is\ returned\ indicating\ such.\r\n\r\n\ \ @return\ if\ the\ solution\ path\ if\ such\ a\ path\ exists\r\n
comment7.params=
comment7.target=Square\ step()
comment7.text=\r\n\ Is\ the\ worklist\ empty?\ If\ so,\ the\ exit\ is\ unreachable;\ terminate\ the\ algorithm.\r\n\ Otherwise,\ grab\ the\ "next"\ location\ to\ explore\ from\ the\ worklist.\r\n\ Does\ the\ location\ correspond\ to\ the\ exit\ square?\ If\ so,\ the\ finish\ was\ reachable;\ terminate\ the\ algorithm\ and\ output\ the\ path\ you\ found.\r\n\ Otherwise,\ it\ is\ a\ reachable\ non-finish\ location\ that\ we\ haven't\ explored\ yet.\ So,\ explore\ it\ as\ follows\:\r\n\ compute\ all\ the\ adjacent\ up,\ right,\ down,\ left\ locations\ that\ are\ inside\ the\ maze\ and\ aren't\ walls,\ and\r\n\ add\ them\ to\ the\ worklist\ for\ later\ exploration\ provided\ they\ have\ not\ previously\ been\ added\ to\ the\ worklist.\r\n\ Also,\ record\ the\ fact\ that\ you've\ explored\ this\ location\ so\ you\ won't\ ever\ have\ to\ explore\ it\ again.\r\n\ Note\ that\ a\ location\ is\ considered\ "explored"\ once\ its\ neighbors\ have\ been\ put\ on\ the\ worklist.\r\n\ The\ neighbors\ themselves\ are\ not\ "explored"\ until\ they\ are\ removed\ from\ the\ worklist\ and\ checked\ for\ their\ neighbors\r\n
comment8.params=
comment8.target=void\ solve()
comment8.text=\r\n\ Repeatedly\ calls\ step()\ until\ you\ get\ to\ the\ exit\ square\ or\ the\ worklist\ is\ empty.\r\n\r\n
numComments=9
